syntax = "proto3";

package api;

option go_package = "github.com/nakamaFramework/cgp-bing-module/api";

import "chinese_poker_game_api.proto";
import "common_api.proto";

enum ShanGameHandType {
    SHANGAME_HAND_TYPE_UNSPECIFIED         = 0 ;     // chua tung choi game
    SHANGAME_HAND_TYPE_NORMAL              = 1 ;          // Bai binh thuong (tinh diem nhu 3 cÃ¢y)
    SHANGAME_HAND_TYPE_THUNG_PHA_SANH      = 2 ;  // Thung pha sanh (3 la lien cung nhau cung chat)
    SHANGAME_HAND_TYPE_DIA                 = 3 ;  // 3 con dau nguoi (J, Q, K)
    SHANGAME_HAND_TYPE_XAM_CO              = 4 ;  // Bai Xam co (3 card same)
    SHANGAME_HAND_TYPE_SHAN                = 5 ;  // Bai Shan ( 2 card have sum = 8 or 9)
     
  }

  
enum ShanGameActionCode {
  SHANGAME_ACTION_UNSPECIFIED = 0;
  SHANGAME_ACTION_STAY = 1;
  SHANGAME_ACTION_HIT = 2;
}

enum ShanGameBetCode {
  SHANGAME_BET_NORMAL = 0;
  SHANGAME_BET_REBET = 1;
  SHANGAME_BET_DOUBLE =2;
}

enum ShanGamePlayerType {
  SHANGAME_PLAYER = 0;
  SHANGAME_BANKER = 1;
}

enum ShanGameHandN0 {
  SHANGAME_HAND_UNSPECIFIED = 0;
  SHANGAME_HAND_1ST = 1;
  SHANGAME_HAND_2ND = 2;
}

message ShanGameAction {
  string user_id = 1;
  ShanGameActionCode code  = 2;
}

message ShanGameBet {
  string user_id = 1;
  int64 chips = 2;
  ShanGameBetCode code = 3;
}

// is_win: -1 -> lost, 1 -> win, 0 -> tie
message ShanGameBetResult {
  int64 bet_amount = 1;
  int64 win_amount = 2;
  int64 total = 3;
  int32 is_win = 4;
}

message ShanGamePlayerBet {
  string user_id = 1;
  int64 insurance = 2;
  int64 first = 3;
  int64 second = 4;
  BalanceUpdate balance  = 14;
}

message ShanGamePLayerBetResult {
  string user_id = 1;
  ShanGameBetResult insurance = 2;
  ShanGameBetResult first = 3;
  ShanGameBetResult second = 4;
}

// when is_banker=true, no user_id is send along
// if is_reveal_banker_hidden_card, only all_cards is send along
message ShanGameUpdateDeal {
  bool is_banker = 1;
  bool is_reveal_banker_hidden_card = 2;
  string user_id = 3;
  ShanGameHandN0 hand_n0 = 4;
  repeated Card new_cards = 5;
  ShanGamePlayerHand hand = 6;
  repeated ShanGamePlayerHand all_player_hand = 7; // only send when user rejoin table, use it to restore the game state, one with userId = "" is banker
}

message ShanGameLegalActions {
  string user_id = 1;
  repeated ShanGameActionCode actions = 2;
}

message ShanGameHand {
  repeated Card cards = 1;
  ShanGameHandType type = 2;
  int32 point = 3;
  string point_card_a = 4;
  int32 min_point = 5;
  int32 max_point = 6;
}

message ShanGamePlayerHand {
  string user_id = 1;
  ShanGameHand first = 2;
  ShanGameHand second = 3;
}

// case player have 2 hands then hand <- 0|1 else 0
message ShanGamePlayerTurn {
  string is_player = 1;
  string user_id = 2;
  ShanGameHandN0 hand_n0 = 3;
}

message ShanGameUpdateDesk {
  bool is_insurance_turn_enter = 1;
  bool is_new_turn = 2;
  string in_turn = 3;
  ShanGameHandN0 hand_N0 = 4;
  bool is_update_bet = 5;
  ShanGamePlayerBet bet = 6;
  bool is_update_legal_action = 7;
  ShanGameLegalActions actions = 8;
  bool is_split_hand = 9;
  ShanGamePlayerHand hand = 10;
  bool is_banker_not_ShanGame = 11;
  repeated ShanGamePlayerBet players_bet = 12;
  Error error = 13;
}

message ShanGameUpdateFinish {
  repeated ShanGamePLayerBetResult bet_results = 1;
}