// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: shangame_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShanGameHandType int32

const (
	ShanGameHandType_SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_UNSPECIFIED    ShanGameHandType = 0 // chua tung choi game
	ShanGameHandType_SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_NORMAL         ShanGameHandType = 1 // Bai binh thuong (tinh diem nhu 3 c√¢y)
	ShanGameHandType_SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_THUNG_PHA_SANH ShanGameHandType = 2 // Thung pha sanh (3 la lien cung nhau cung chat)
	ShanGameHandType_SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_DIA            ShanGameHandType = 3 // 3 con dau nguoi (J, Q, K)
	ShanGameHandType_SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_XAM_CO         ShanGameHandType = 4 // Bai Xam co (3 card same)
	ShanGameHandType_SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_SHAN           ShanGameHandType = 5 // Bai Shan ( 2 card have sum = 8 or 9)
)

// Enum value maps for ShanGameHandType.
var (
	ShanGameHandType_name = map[int32]string{
		0: "SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_UNSPECIFIED",
		1: "SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_NORMAL",
		2: "SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_THUNG_PHA_SANH",
		3: "SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_DIA",
		4: "SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_XAM_CO",
		5: "SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_SHAN",
	}
	ShanGameHandType_value = map[string]int32{
		"SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_UNSPECIFIED":    0,
		"SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_NORMAL":         1,
		"SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_THUNG_PHA_SANH": 2,
		"SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_DIA":            3,
		"SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_XAM_CO":         4,
		"SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_SHAN":           5,
	}
)

func (x ShanGameHandType) Enum() *ShanGameHandType {
	p := new(ShanGameHandType)
	*p = x
	return p
}

func (x ShanGameHandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShanGameHandType) Descriptor() protoreflect.EnumDescriptor {
	return file_shangame_api_proto_enumTypes[0].Descriptor()
}

func (ShanGameHandType) Type() protoreflect.EnumType {
	return &file_shangame_api_proto_enumTypes[0]
}

func (x ShanGameHandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShanGameHandType.Descriptor instead.
func (ShanGameHandType) EnumDescriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{0}
}

type ShanGameActionCode int32

const (
	ShanGameActionCode_SHANGAME_ACTION_UNSPECIFIED ShanGameActionCode = 0
	ShanGameActionCode_SHANGAME_ACTION_STAY        ShanGameActionCode = 1
	ShanGameActionCode_SHANGAME_ACTION_HIT         ShanGameActionCode = 2
)

// Enum value maps for ShanGameActionCode.
var (
	ShanGameActionCode_name = map[int32]string{
		0: "SHANGAME_ACTION_UNSPECIFIED",
		1: "SHANGAME_ACTION_STAY",
		2: "SHANGAME_ACTION_HIT",
	}
	ShanGameActionCode_value = map[string]int32{
		"SHANGAME_ACTION_UNSPECIFIED": 0,
		"SHANGAME_ACTION_STAY":        1,
		"SHANGAME_ACTION_HIT":         2,
	}
)

func (x ShanGameActionCode) Enum() *ShanGameActionCode {
	p := new(ShanGameActionCode)
	*p = x
	return p
}

func (x ShanGameActionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShanGameActionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_shangame_api_proto_enumTypes[1].Descriptor()
}

func (ShanGameActionCode) Type() protoreflect.EnumType {
	return &file_shangame_api_proto_enumTypes[1]
}

func (x ShanGameActionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShanGameActionCode.Descriptor instead.
func (ShanGameActionCode) EnumDescriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{1}
}

type ShanGameBetCode int32

const (
	ShanGameBetCode_SHANGAME_BET_NORMAL ShanGameBetCode = 0
	ShanGameBetCode_SHANGAME_BET_REBET  ShanGameBetCode = 1
	ShanGameBetCode_SHANGAME_BET_DOUBLE ShanGameBetCode = 2
)

// Enum value maps for ShanGameBetCode.
var (
	ShanGameBetCode_name = map[int32]string{
		0: "SHANGAME_BET_NORMAL",
		1: "SHANGAME_BET_REBET",
		2: "SHANGAME_BET_DOUBLE",
	}
	ShanGameBetCode_value = map[string]int32{
		"SHANGAME_BET_NORMAL": 0,
		"SHANGAME_BET_REBET":  1,
		"SHANGAME_BET_DOUBLE": 2,
	}
)

func (x ShanGameBetCode) Enum() *ShanGameBetCode {
	p := new(ShanGameBetCode)
	*p = x
	return p
}

func (x ShanGameBetCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShanGameBetCode) Descriptor() protoreflect.EnumDescriptor {
	return file_shangame_api_proto_enumTypes[2].Descriptor()
}

func (ShanGameBetCode) Type() protoreflect.EnumType {
	return &file_shangame_api_proto_enumTypes[2]
}

func (x ShanGameBetCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShanGameBetCode.Descriptor instead.
func (ShanGameBetCode) EnumDescriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{2}
}

type ShanGamePlayerType int32

const (
	ShanGamePlayerType_SHANGAME_PLAYER ShanGamePlayerType = 0
	ShanGamePlayerType_SHANGAME_BANKER ShanGamePlayerType = 1
)

// Enum value maps for ShanGamePlayerType.
var (
	ShanGamePlayerType_name = map[int32]string{
		0: "SHANGAME_PLAYER",
		1: "SHANGAME_BANKER",
	}
	ShanGamePlayerType_value = map[string]int32{
		"SHANGAME_PLAYER": 0,
		"SHANGAME_BANKER": 1,
	}
)

func (x ShanGamePlayerType) Enum() *ShanGamePlayerType {
	p := new(ShanGamePlayerType)
	*p = x
	return p
}

func (x ShanGamePlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShanGamePlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_shangame_api_proto_enumTypes[3].Descriptor()
}

func (ShanGamePlayerType) Type() protoreflect.EnumType {
	return &file_shangame_api_proto_enumTypes[3]
}

func (x ShanGamePlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShanGamePlayerType.Descriptor instead.
func (ShanGamePlayerType) EnumDescriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{3}
}

type ShanGameHandN0 int32

const (
	ShanGameHandN0_SHANGAME_HAND_UNSPECIFIED ShanGameHandN0 = 0
	ShanGameHandN0_SHANGAME_HAND_1ST         ShanGameHandN0 = 1
	ShanGameHandN0_SHANGAME_HAND_2ND         ShanGameHandN0 = 2
)

// Enum value maps for ShanGameHandN0.
var (
	ShanGameHandN0_name = map[int32]string{
		0: "SHANGAME_HAND_UNSPECIFIED",
		1: "SHANGAME_HAND_1ST",
		2: "SHANGAME_HAND_2ND",
	}
	ShanGameHandN0_value = map[string]int32{
		"SHANGAME_HAND_UNSPECIFIED": 0,
		"SHANGAME_HAND_1ST":         1,
		"SHANGAME_HAND_2ND":         2,
	}
)

func (x ShanGameHandN0) Enum() *ShanGameHandN0 {
	p := new(ShanGameHandN0)
	*p = x
	return p
}

func (x ShanGameHandN0) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShanGameHandN0) Descriptor() protoreflect.EnumDescriptor {
	return file_shangame_api_proto_enumTypes[4].Descriptor()
}

func (ShanGameHandN0) Type() protoreflect.EnumType {
	return &file_shangame_api_proto_enumTypes[4]
}

func (x ShanGameHandN0) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShanGameHandN0.Descriptor instead.
func (ShanGameHandN0) EnumDescriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{4}
}

type ShanGameAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code   ShanGameActionCode `protobuf:"varint,2,opt,name=code,proto3,enum=api.ShanGameActionCode" json:"code,omitempty"`
}

func (x *ShanGameAction) Reset() {
	*x = ShanGameAction{}
	mi := &file_shangame_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGameAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGameAction) ProtoMessage() {}

func (x *ShanGameAction) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGameAction.ProtoReflect.Descriptor instead.
func (*ShanGameAction) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{0}
}

func (x *ShanGameAction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShanGameAction) GetCode() ShanGameActionCode {
	if x != nil {
		return x.Code
	}
	return ShanGameActionCode_SHANGAME_ACTION_UNSPECIFIED
}

type ShanGameBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Chips  int64           `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	Code   ShanGameBetCode `protobuf:"varint,3,opt,name=code,proto3,enum=api.ShanGameBetCode" json:"code,omitempty"`
}

func (x *ShanGameBet) Reset() {
	*x = ShanGameBet{}
	mi := &file_shangame_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGameBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGameBet) ProtoMessage() {}

func (x *ShanGameBet) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGameBet.ProtoReflect.Descriptor instead.
func (*ShanGameBet) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{1}
}

func (x *ShanGameBet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShanGameBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *ShanGameBet) GetCode() ShanGameBetCode {
	if x != nil {
		return x.Code
	}
	return ShanGameBetCode_SHANGAME_BET_NORMAL
}

// is_win: -1 -> lost, 1 -> win, 0 -> tie
type ShanGameBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetAmount int64 `protobuf:"varint,1,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	WinAmount int64 `protobuf:"varint,2,opt,name=win_amount,json=winAmount,proto3" json:"win_amount,omitempty"`
	Total     int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	IsWin     int32 `protobuf:"varint,4,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
}

func (x *ShanGameBetResult) Reset() {
	*x = ShanGameBetResult{}
	mi := &file_shangame_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGameBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGameBetResult) ProtoMessage() {}

func (x *ShanGameBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGameBetResult.ProtoReflect.Descriptor instead.
func (*ShanGameBetResult) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{2}
}

func (x *ShanGameBetResult) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *ShanGameBetResult) GetWinAmount() int64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *ShanGameBetResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ShanGameBetResult) GetIsWin() int32 {
	if x != nil {
		return x.IsWin
	}
	return 0
}

type ShanGamePlayerBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string         `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Insurance int64          `protobuf:"varint,2,opt,name=insurance,proto3" json:"insurance,omitempty"`
	First     int64          `protobuf:"varint,3,opt,name=first,proto3" json:"first,omitempty"`
	Second    int64          `protobuf:"varint,4,opt,name=second,proto3" json:"second,omitempty"`
	Balance   *BalanceUpdate `protobuf:"bytes,14,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *ShanGamePlayerBet) Reset() {
	*x = ShanGamePlayerBet{}
	mi := &file_shangame_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGamePlayerBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGamePlayerBet) ProtoMessage() {}

func (x *ShanGamePlayerBet) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGamePlayerBet.ProtoReflect.Descriptor instead.
func (*ShanGamePlayerBet) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{3}
}

func (x *ShanGamePlayerBet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShanGamePlayerBet) GetInsurance() int64 {
	if x != nil {
		return x.Insurance
	}
	return 0
}

func (x *ShanGamePlayerBet) GetFirst() int64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *ShanGamePlayerBet) GetSecond() int64 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *ShanGamePlayerBet) GetBalance() *BalanceUpdate {
	if x != nil {
		return x.Balance
	}
	return nil
}

type ShanGamePLayerBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Insurance *ShanGameBetResult `protobuf:"bytes,2,opt,name=insurance,proto3" json:"insurance,omitempty"`
	First     *ShanGameBetResult `protobuf:"bytes,3,opt,name=first,proto3" json:"first,omitempty"`
	Second    *ShanGameBetResult `protobuf:"bytes,4,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *ShanGamePLayerBetResult) Reset() {
	*x = ShanGamePLayerBetResult{}
	mi := &file_shangame_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGamePLayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGamePLayerBetResult) ProtoMessage() {}

func (x *ShanGamePLayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGamePLayerBetResult.ProtoReflect.Descriptor instead.
func (*ShanGamePLayerBetResult) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{4}
}

func (x *ShanGamePLayerBetResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShanGamePLayerBetResult) GetInsurance() *ShanGameBetResult {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *ShanGamePLayerBetResult) GetFirst() *ShanGameBetResult {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *ShanGamePLayerBetResult) GetSecond() *ShanGameBetResult {
	if x != nil {
		return x.Second
	}
	return nil
}

// when is_banker=true, no user_id is send along
// if is_reveal_banker_hidden_card, only all_cards is send along
type ShanGameUpdateDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBanker                 bool                  `protobuf:"varint,1,opt,name=is_banker,json=isBanker,proto3" json:"is_banker,omitempty"`
	IsRevealBankerHiddenCard bool                  `protobuf:"varint,2,opt,name=is_reveal_banker_hidden_card,json=isRevealBankerHiddenCard,proto3" json:"is_reveal_banker_hidden_card,omitempty"`
	UserId                   string                `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HandN0                   ShanGameHandN0        `protobuf:"varint,4,opt,name=hand_n0,json=handN0,proto3,enum=api.ShanGameHandN0" json:"hand_n0,omitempty"`
	NewCards                 []*Card               `protobuf:"bytes,5,rep,name=new_cards,json=newCards,proto3" json:"new_cards,omitempty"`
	Hand                     *ShanGamePlayerHand   `protobuf:"bytes,6,opt,name=hand,proto3" json:"hand,omitempty"`
	AllPlayerHand            []*ShanGamePlayerHand `protobuf:"bytes,7,rep,name=all_player_hand,json=allPlayerHand,proto3" json:"all_player_hand,omitempty"` // only send when user rejoin table, use it to restore the game state, one with userId = "" is banker
}

func (x *ShanGameUpdateDeal) Reset() {
	*x = ShanGameUpdateDeal{}
	mi := &file_shangame_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGameUpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGameUpdateDeal) ProtoMessage() {}

func (x *ShanGameUpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGameUpdateDeal.ProtoReflect.Descriptor instead.
func (*ShanGameUpdateDeal) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{5}
}

func (x *ShanGameUpdateDeal) GetIsBanker() bool {
	if x != nil {
		return x.IsBanker
	}
	return false
}

func (x *ShanGameUpdateDeal) GetIsRevealBankerHiddenCard() bool {
	if x != nil {
		return x.IsRevealBankerHiddenCard
	}
	return false
}

func (x *ShanGameUpdateDeal) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShanGameUpdateDeal) GetHandN0() ShanGameHandN0 {
	if x != nil {
		return x.HandN0
	}
	return ShanGameHandN0_SHANGAME_HAND_UNSPECIFIED
}

func (x *ShanGameUpdateDeal) GetNewCards() []*Card {
	if x != nil {
		return x.NewCards
	}
	return nil
}

func (x *ShanGameUpdateDeal) GetHand() *ShanGamePlayerHand {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *ShanGameUpdateDeal) GetAllPlayerHand() []*ShanGamePlayerHand {
	if x != nil {
		return x.AllPlayerHand
	}
	return nil
}

type ShanGameLegalActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Actions []ShanGameActionCode `protobuf:"varint,2,rep,packed,name=actions,proto3,enum=api.ShanGameActionCode" json:"actions,omitempty"`
}

func (x *ShanGameLegalActions) Reset() {
	*x = ShanGameLegalActions{}
	mi := &file_shangame_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGameLegalActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGameLegalActions) ProtoMessage() {}

func (x *ShanGameLegalActions) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGameLegalActions.ProtoReflect.Descriptor instead.
func (*ShanGameLegalActions) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{6}
}

func (x *ShanGameLegalActions) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShanGameLegalActions) GetActions() []ShanGameActionCode {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ShanGameHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards      []*Card          `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	Type       ShanGameHandType `protobuf:"varint,2,opt,name=type,proto3,enum=api.ShanGameHandType" json:"type,omitempty"`
	Point      int32            `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	PointCardA string           `protobuf:"bytes,4,opt,name=point_card_a,json=pointCardA,proto3" json:"point_card_a,omitempty"`
	MinPoint   int32            `protobuf:"varint,5,opt,name=min_point,json=minPoint,proto3" json:"min_point,omitempty"`
	MaxPoint   int32            `protobuf:"varint,6,opt,name=max_point,json=maxPoint,proto3" json:"max_point,omitempty"`
}

func (x *ShanGameHand) Reset() {
	*x = ShanGameHand{}
	mi := &file_shangame_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGameHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGameHand) ProtoMessage() {}

func (x *ShanGameHand) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGameHand.ProtoReflect.Descriptor instead.
func (*ShanGameHand) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{7}
}

func (x *ShanGameHand) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *ShanGameHand) GetType() ShanGameHandType {
	if x != nil {
		return x.Type
	}
	return ShanGameHandType_SHANGAME_HANDTYPE_SHANGAME_HAND_TYPE_UNSPECIFIED
}

func (x *ShanGameHand) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *ShanGameHand) GetPointCardA() string {
	if x != nil {
		return x.PointCardA
	}
	return ""
}

func (x *ShanGameHand) GetMinPoint() int32 {
	if x != nil {
		return x.MinPoint
	}
	return 0
}

func (x *ShanGameHand) GetMaxPoint() int32 {
	if x != nil {
		return x.MaxPoint
	}
	return 0
}

type ShanGamePlayerHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string        `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	First  *ShanGameHand `protobuf:"bytes,2,opt,name=first,proto3" json:"first,omitempty"`
	Second *ShanGameHand `protobuf:"bytes,3,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *ShanGamePlayerHand) Reset() {
	*x = ShanGamePlayerHand{}
	mi := &file_shangame_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGamePlayerHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGamePlayerHand) ProtoMessage() {}

func (x *ShanGamePlayerHand) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGamePlayerHand.ProtoReflect.Descriptor instead.
func (*ShanGamePlayerHand) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{8}
}

func (x *ShanGamePlayerHand) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShanGamePlayerHand) GetFirst() *ShanGameHand {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *ShanGamePlayerHand) GetSecond() *ShanGameHand {
	if x != nil {
		return x.Second
	}
	return nil
}

// case player have 2 hands then hand <- 0|1 else 0
type ShanGamePlayerTurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPlayer string         `protobuf:"bytes,1,opt,name=is_player,json=isPlayer,proto3" json:"is_player,omitempty"`
	UserId   string         `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HandN0   ShanGameHandN0 `protobuf:"varint,3,opt,name=hand_n0,json=handN0,proto3,enum=api.ShanGameHandN0" json:"hand_n0,omitempty"`
}

func (x *ShanGamePlayerTurn) Reset() {
	*x = ShanGamePlayerTurn{}
	mi := &file_shangame_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGamePlayerTurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGamePlayerTurn) ProtoMessage() {}

func (x *ShanGamePlayerTurn) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGamePlayerTurn.ProtoReflect.Descriptor instead.
func (*ShanGamePlayerTurn) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{9}
}

func (x *ShanGamePlayerTurn) GetIsPlayer() string {
	if x != nil {
		return x.IsPlayer
	}
	return ""
}

func (x *ShanGamePlayerTurn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShanGamePlayerTurn) GetHandN0() ShanGameHandN0 {
	if x != nil {
		return x.HandN0
	}
	return ShanGameHandN0_SHANGAME_HAND_UNSPECIFIED
}

type ShanGameUpdateDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInsuranceTurnEnter bool                  `protobuf:"varint,1,opt,name=is_insurance_turn_enter,json=isInsuranceTurnEnter,proto3" json:"is_insurance_turn_enter,omitempty"`
	IsNewTurn            bool                  `protobuf:"varint,2,opt,name=is_new_turn,json=isNewTurn,proto3" json:"is_new_turn,omitempty"`
	InTurn               string                `protobuf:"bytes,3,opt,name=in_turn,json=inTurn,proto3" json:"in_turn,omitempty"`
	Hand_N0              ShanGameHandN0        `protobuf:"varint,4,opt,name=hand_N0,json=handN0,proto3,enum=api.ShanGameHandN0" json:"hand_N0,omitempty"`
	IsUpdateBet          bool                  `protobuf:"varint,5,opt,name=is_update_bet,json=isUpdateBet,proto3" json:"is_update_bet,omitempty"`
	Bet                  *ShanGamePlayerBet    `protobuf:"bytes,6,opt,name=bet,proto3" json:"bet,omitempty"`
	IsUpdateLegalAction  bool                  `protobuf:"varint,7,opt,name=is_update_legal_action,json=isUpdateLegalAction,proto3" json:"is_update_legal_action,omitempty"`
	Actions              *ShanGameLegalActions `protobuf:"bytes,8,opt,name=actions,proto3" json:"actions,omitempty"`
	IsSplitHand          bool                  `protobuf:"varint,9,opt,name=is_split_hand,json=isSplitHand,proto3" json:"is_split_hand,omitempty"`
	Hand                 *ShanGamePlayerHand   `protobuf:"bytes,10,opt,name=hand,proto3" json:"hand,omitempty"`
	IsBankerNot_ShanGame bool                  `protobuf:"varint,11,opt,name=is_banker_not_ShanGame,json=isBankerNotShanGame,proto3" json:"is_banker_not_ShanGame,omitempty"`
	PlayersBet           []*ShanGamePlayerBet  `protobuf:"bytes,12,rep,name=players_bet,json=playersBet,proto3" json:"players_bet,omitempty"`
	Error                *Error                `protobuf:"bytes,13,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ShanGameUpdateDesk) Reset() {
	*x = ShanGameUpdateDesk{}
	mi := &file_shangame_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGameUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGameUpdateDesk) ProtoMessage() {}

func (x *ShanGameUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGameUpdateDesk.ProtoReflect.Descriptor instead.
func (*ShanGameUpdateDesk) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{10}
}

func (x *ShanGameUpdateDesk) GetIsInsuranceTurnEnter() bool {
	if x != nil {
		return x.IsInsuranceTurnEnter
	}
	return false
}

func (x *ShanGameUpdateDesk) GetIsNewTurn() bool {
	if x != nil {
		return x.IsNewTurn
	}
	return false
}

func (x *ShanGameUpdateDesk) GetInTurn() string {
	if x != nil {
		return x.InTurn
	}
	return ""
}

func (x *ShanGameUpdateDesk) GetHand_N0() ShanGameHandN0 {
	if x != nil {
		return x.Hand_N0
	}
	return ShanGameHandN0_SHANGAME_HAND_UNSPECIFIED
}

func (x *ShanGameUpdateDesk) GetIsUpdateBet() bool {
	if x != nil {
		return x.IsUpdateBet
	}
	return false
}

func (x *ShanGameUpdateDesk) GetBet() *ShanGamePlayerBet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *ShanGameUpdateDesk) GetIsUpdateLegalAction() bool {
	if x != nil {
		return x.IsUpdateLegalAction
	}
	return false
}

func (x *ShanGameUpdateDesk) GetActions() *ShanGameLegalActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ShanGameUpdateDesk) GetIsSplitHand() bool {
	if x != nil {
		return x.IsSplitHand
	}
	return false
}

func (x *ShanGameUpdateDesk) GetHand() *ShanGamePlayerHand {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *ShanGameUpdateDesk) GetIsBankerNot_ShanGame() bool {
	if x != nil {
		return x.IsBankerNot_ShanGame
	}
	return false
}

func (x *ShanGameUpdateDesk) GetPlayersBet() []*ShanGamePlayerBet {
	if x != nil {
		return x.PlayersBet
	}
	return nil
}

func (x *ShanGameUpdateDesk) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ShanGameUpdateFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetResults []*ShanGamePLayerBetResult `protobuf:"bytes,1,rep,name=bet_results,json=betResults,proto3" json:"bet_results,omitempty"`
}

func (x *ShanGameUpdateFinish) Reset() {
	*x = ShanGameUpdateFinish{}
	mi := &file_shangame_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShanGameUpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShanGameUpdateFinish) ProtoMessage() {}

func (x *ShanGameUpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_shangame_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShanGameUpdateFinish.ProtoReflect.Descriptor instead.
func (*ShanGameUpdateFinish) Descriptor() ([]byte, []int) {
	return file_shangame_api_proto_rawDescGZIP(), []int{11}
}

func (x *ShanGameUpdateFinish) GetBetResults() []*ShanGamePLayerBetResult {
	if x != nil {
		return x.BetResults
	}
	return nil
}

var File_shangame_api_proto protoreflect.FileDescriptor

var file_shangame_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x68, 0x61, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x0e, 0x53, 0x68, 0x61,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x66, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x28, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x11, 0x53, 0x68, 0x61,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x53, 0x68,
	0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xce, 0x02, 0x0a, 0x12,
	0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x42,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64,
	0x5f, 0x6e, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x4e, 0x30, 0x52, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x4e, 0x30, 0x12, 0x26, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2b,
	0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x22, 0x62, 0x0a, 0x14,
	0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x41, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x81, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x22, 0x78, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x4e, 0x30, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x4e, 0x30, 0x22, 0xcb, 0x04,
	0x0a, 0x12, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e,
	0x54, 0x75, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x4e, 0x30, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x4e, 0x30, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x4e, 0x30, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x03, 0x62, 0x65, 0x74,
	0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x2b,
	0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x69,
	0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x53, 0x68, 0x61,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x42,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x42, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x14, 0x53,
	0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2a, 0xc0, 0x02, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x48, 0x41, 0x4e, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41,
	0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a,
	0x2b, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x37,
	0x0a, 0x33, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x55, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x41,
	0x5f, 0x53, 0x41, 0x4e, 0x48, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x48, 0x41, 0x4e, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41,
	0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x41, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x4e, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x41,
	0x4d, 0x5f, 0x43, 0x4f, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x4e,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x48, 0x41, 0x4e, 0x10, 0x05, 0x2a, 0x68, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x02, 0x2a,
	0x5b, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42,
	0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x42, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x42, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x12,
	0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x4e, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x5d, 0x0a, 0x0e,
	0x53, 0x68, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x4e, 0x30, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x31,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x32, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x30, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x67, 0x70, 0x2d, 0x62, 0x69,
	0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shangame_api_proto_rawDescOnce sync.Once
	file_shangame_api_proto_rawDescData = file_shangame_api_proto_rawDesc
)

func file_shangame_api_proto_rawDescGZIP() []byte {
	file_shangame_api_proto_rawDescOnce.Do(func() {
		file_shangame_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_shangame_api_proto_rawDescData)
	})
	return file_shangame_api_proto_rawDescData
}

var file_shangame_api_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_shangame_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_shangame_api_proto_goTypes = []any{
	(ShanGameHandType)(0),           // 0: api.ShanGameHandType
	(ShanGameActionCode)(0),         // 1: api.ShanGameActionCode
	(ShanGameBetCode)(0),            // 2: api.ShanGameBetCode
	(ShanGamePlayerType)(0),         // 3: api.ShanGamePlayerType
	(ShanGameHandN0)(0),             // 4: api.ShanGameHandN0
	(*ShanGameAction)(nil),          // 5: api.ShanGameAction
	(*ShanGameBet)(nil),             // 6: api.ShanGameBet
	(*ShanGameBetResult)(nil),       // 7: api.ShanGameBetResult
	(*ShanGamePlayerBet)(nil),       // 8: api.ShanGamePlayerBet
	(*ShanGamePLayerBetResult)(nil), // 9: api.ShanGamePLayerBetResult
	(*ShanGameUpdateDeal)(nil),      // 10: api.ShanGameUpdateDeal
	(*ShanGameLegalActions)(nil),    // 11: api.ShanGameLegalActions
	(*ShanGameHand)(nil),            // 12: api.ShanGameHand
	(*ShanGamePlayerHand)(nil),      // 13: api.ShanGamePlayerHand
	(*ShanGamePlayerTurn)(nil),      // 14: api.ShanGamePlayerTurn
	(*ShanGameUpdateDesk)(nil),      // 15: api.ShanGameUpdateDesk
	(*ShanGameUpdateFinish)(nil),    // 16: api.ShanGameUpdateFinish
	(*BalanceUpdate)(nil),           // 17: api.BalanceUpdate
	(*Card)(nil),                    // 18: api.Card
	(*Error)(nil),                   // 19: api.Error
}
var file_shangame_api_proto_depIdxs = []int32{
	1,  // 0: api.ShanGameAction.code:type_name -> api.ShanGameActionCode
	2,  // 1: api.ShanGameBet.code:type_name -> api.ShanGameBetCode
	17, // 2: api.ShanGamePlayerBet.balance:type_name -> api.BalanceUpdate
	7,  // 3: api.ShanGamePLayerBetResult.insurance:type_name -> api.ShanGameBetResult
	7,  // 4: api.ShanGamePLayerBetResult.first:type_name -> api.ShanGameBetResult
	7,  // 5: api.ShanGamePLayerBetResult.second:type_name -> api.ShanGameBetResult
	4,  // 6: api.ShanGameUpdateDeal.hand_n0:type_name -> api.ShanGameHandN0
	18, // 7: api.ShanGameUpdateDeal.new_cards:type_name -> api.Card
	13, // 8: api.ShanGameUpdateDeal.hand:type_name -> api.ShanGamePlayerHand
	13, // 9: api.ShanGameUpdateDeal.all_player_hand:type_name -> api.ShanGamePlayerHand
	1,  // 10: api.ShanGameLegalActions.actions:type_name -> api.ShanGameActionCode
	18, // 11: api.ShanGameHand.cards:type_name -> api.Card
	0,  // 12: api.ShanGameHand.type:type_name -> api.ShanGameHandType
	12, // 13: api.ShanGamePlayerHand.first:type_name -> api.ShanGameHand
	12, // 14: api.ShanGamePlayerHand.second:type_name -> api.ShanGameHand
	4,  // 15: api.ShanGamePlayerTurn.hand_n0:type_name -> api.ShanGameHandN0
	4,  // 16: api.ShanGameUpdateDesk.hand_N0:type_name -> api.ShanGameHandN0
	8,  // 17: api.ShanGameUpdateDesk.bet:type_name -> api.ShanGamePlayerBet
	11, // 18: api.ShanGameUpdateDesk.actions:type_name -> api.ShanGameLegalActions
	13, // 19: api.ShanGameUpdateDesk.hand:type_name -> api.ShanGamePlayerHand
	8,  // 20: api.ShanGameUpdateDesk.players_bet:type_name -> api.ShanGamePlayerBet
	19, // 21: api.ShanGameUpdateDesk.error:type_name -> api.Error
	9,  // 22: api.ShanGameUpdateFinish.bet_results:type_name -> api.ShanGamePLayerBetResult
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_shangame_api_proto_init() }
func file_shangame_api_proto_init() {
	if File_shangame_api_proto != nil {
		return
	}
	file_chinese_poker_game_api_proto_init()
	file_common_api_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shangame_api_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shangame_api_proto_goTypes,
		DependencyIndexes: file_shangame_api_proto_depIdxs,
		EnumInfos:         file_shangame_api_proto_enumTypes,
		MessageInfos:      file_shangame_api_proto_msgTypes,
	}.Build()
	File_shangame_api_proto = out.File
	file_shangame_api_proto_rawDesc = nil
	file_shangame_api_proto_goTypes = nil
	file_shangame_api_proto_depIdxs = nil
}
